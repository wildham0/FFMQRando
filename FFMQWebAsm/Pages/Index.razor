@page "/"
@using Microsoft.AspNetCore.Components.Forms
@using System.IO;
@using System;
@using System.Web
@using FFMQLib;
@using Microsoft.JSInterop;
@using Microsoft.JSInterop.WebAssembly;
@using Blazorise.Components;
@using RomUtilities;
@using Microsoft.AspNetCore.Components
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<style>
    body {

        background: linear-gradient(rgba(27,42,81,1),rgba(85,109,171,1)) no-repeat center fixed;
        background-size: cover;
    }
</style>

<div class="center-logo"><img height=100 src="@titleLetters[0]" /><img height=100 src="@titleLetters[1]" /><img height=100 src="@titleLetters[2]" /><img height=100 src="@titleLetters[3]" /><img height=100 src="@titleLetters[4]" /><img height=100 src="@titleLetters[5]" /><img height=100 src="logo/mqlogo_.png" /><img height=100 src="@titleLetters[6]" /><img height=100 src="@titleLetters[7]" /><img height=100 src="@titleLetters[8]" /><img height=100 src="@titleLetters[9]" /><img height=100 src="@titleLetters[10]" /></div>
<h1 class="text-secondary text-center" style="font-size: 1em">A FFMQ Randomizer<br />@("v" + @FFMQLib.Metadata.VersionNumber + @GetBetaStatus())</h1>


<div><br /><br /><br /></div>

<h2 id="fileSection" class="text-secondary">File</h2>

<Field>
    <FieldLabel TextColor="TextColor.Secondary" class="fw-bold">ROM</FieldLabel> 
    <FileEdit Filter="*.sfc" AutoReset="false" Changed="@LoadFiles"></FileEdit>
    <FieldHelp>@romMessage</FieldHelp>
</Field>
<Fields>
    <Field>
        <FieldLabel TextColor="TextColor.Secondary" class="fw-bold">Seed</FieldLabel> 
        <TextEdit Placeholder="Seed" Text="@showSeed" FocusOut="@SeedOnLoseFocus" KeyUp="@SeedOnKeyUp" TextChanged="@SeedOnChanged"/>
        <FieldHelp>@seedMessage</FieldHelp>
    </Field>
     <Field>
        <FieldLabel Visibility="Visibility.Invisible">None</FieldLabel>
        <Button Color="Color.Primary" Clicked="@RollSeed" class="field-button">Roll Seed</Button>
    </Field>
</Fields>
<Fields>
    <Field>
        <FieldLabel TextColor="TextColor.Secondary" class="fw-bold">Flag String</FieldLabel> 
        <TextEdit Placeholder="Flag string" Text="@flagString" FocusOut="@FlagsOnLoseFocus" KeyUp="@FlagsOnKeyUp" TextChanged="@FlagsOnChanged"/>
        <FieldHelp>@flagsMessage</FieldHelp>
    </Field>
</Fields>

<Field>
    <Button Color="Color.Primary" Loading="@isGenerating" Clicked="@OnGenerate" Disabled="@isLoadingRom">Generate</Button>
</Field>

<div><br /><br /><br /></div>
<h2 id="optionsSection" class="text-secondary">Options</h2>

<h3 class="text-secondary" style="font-size: 1.25em">
    Items Shuffling
    <Tooltip Text="Govern how shuffled Quest Items will be placed.<br /><br />Prioritize: Quest Items will always be found in these locations.<br /><br />Include: Quest Items may be found in these locations.<br /><br />Exclude: Quest Items will never be found in these locations." Inline Multiline Placement="TooltipPlacement.Right">
        <Icon TextColor="TextColor.Secondary" Name="IconName.QuestionCircle" IconSize=IconSize.Small /> 
    </Tooltip>    
</h3>

<Field>
    <FieldLabel TextColor="TextColor.Secondary" class="fw-bold">Logic</FieldLabel>
    <Tooltip Text="Placement logic sets the rules that will be applied when placing items.<br /><br />Friendly: Required Items to clear a dungeon will never be placed in that dungeon to avoid the need to revisit it. Also, the Magic Mirror and the Mask will always be available before Ice Pyramid and Volcano, respectively.<br /><br />Standard: Items are randomly placed and logic merely verifies that they're all accessible." Inline Multiline Placement="TooltipPlacement.Right">
        <Icon TextColor="TextColor.Secondary" Name="IconName.QuestionCircle" IconSize=IconSize.Small /> 
    </Tooltip>
    <Select @bind-SelectedValue="@flags.LogicOptions">
        @foreach(var item in Enum.GetValues<FFMQLib.LogicOptions>())
        {
            <SelectItem Value="@item">@(item.GetDescription())</SelectItem>
        }
    </Select>
</Field>
<Field>
    <FieldLabel TextColor="TextColor.Secondary" class="fw-bold">Original Chests</FieldLabel>
    <Tooltip Text="Original Chests are all the red chests locations in the original game, except the Venus Key Chest in Focus Tower and the new Locked Chest in Spencer's Cave, which count as NPCs.<br /><br />If a chest doesn't contain a Quest Item, it will show up as a brown box." Inline Multiline Placement="TooltipPlacement.Right">
        <Icon TextColor="TextColor.Secondary" Name="IconName.QuestionCircle" IconSize=IconSize.Small /> 
    </Tooltip>
    <Select @bind-SelectedValue="@flags.ChestsShuffle">
        @foreach(var item in Enum.GetValues<FFMQLib.ItemShuffleChests>())
        {
            <SelectItem Value="@item">@(item.GetDescription())</SelectItem>
        }
    </Select>
</Field>
<Field>
    <FieldLabel TextColor="TextColor.Secondary" class="fw-bold">NPCs</FieldLabel>
    <Tooltip Text="NPCs are all the NPC locations in the original game, as well as the new Reuben item in Mine, the Venus Key Chest in Focus Tower and the new Locked Chest in Spencer's Cave." Inline Multiline Placement="TooltipPlacement.Right">
        <Icon TextColor="TextColor.Secondary" Name="IconName.QuestionCircle" IconSize=IconSize.Small /> 
    </Tooltip>
    <Select @bind-SelectedValue="@flags.NPCsShuffle">
        @foreach(var item in Enum.GetValues<FFMQLib.ItemShuffleNPCsBattlefields>())
        {
            <SelectItem Value="@item">@(item.GetDescription())</SelectItem>
        }
    </Select>
</Field>
<Field>
    <FieldLabel TextColor="TextColor.Secondary" class="fw-bold">Battlefields</FieldLabel> 
    <Tooltip Text="Battlefields are all the battlefields that gave a Quest Item in the original game; if Shuffle Battlefields Rewards is enabled, the locations will change, but the same number of battlefields will offer an item." Inline Multiline Placement="TooltipPlacement.Right">
        <Icon TextColor="TextColor.Secondary" Name="IconName.QuestionCircle" IconSize=IconSize.Small /> 
    </Tooltip>
    <Select @bind-SelectedValue="@flags.BattlefieldsShuffle">
        @foreach(var item in Enum.GetValues<FFMQLib.ItemShuffleNPCsBattlefields>())
        {
            <SelectItem Value="@item">@(item.GetDescription())</SelectItem>
        }
    </Select>
</Field>
<Field>
    <FieldLabel TextColor="TextColor.Secondary" class="fw-bold">Brown Boxes</FieldLabel>
    <Tooltip Text="Brown Boxes are all the boxes that contained a consumable in the original game.<br /><br />If a brown box is selected to contain a Quest Item, it will show up as a red chest." Inline Multiline Placement="TooltipPlacement.Right">
        <Icon TextColor="TextColor.Secondary" Name="IconName.QuestionCircle" IconSize=IconSize.Small /> 
    </Tooltip>
    <Select @bind-SelectedValue="@flags.BoxesShuffle">
        @foreach(var item in Enum.GetValues<FFMQLib.ItemShuffleBoxes>())
        {
            <SelectItem Value="@item">@(item.GetDescription())</SelectItem>
        }
    </Select>
</Field>
<Field>
    <Switch TValue="bool" @bind-Checked="@flags.ShuffleBoxesContent">
        <Text TextColor="TextColor.Secondary" class="fw-bold">Shuffle Brown Boxes' Content</Text>
        <Tooltip Text="If enabled, the content of brown boxes will be shuffled amongst themselves." Inline Multiline Placement="TooltipPlacement.Right">
            <Icon TextColor="TextColor.Secondary" Name="IconName.QuestionCircle" IconSize=IconSize.Small /> 
        </Tooltip>
    </Switch>
</Field>
<Field>
    <Switch TValue="bool" @bind-Checked="@flags.RandomStartingWeapon">
        <Text TextColor="TextColor.Secondary" class="fw-bold">Random Starting Weapon</Text>
        <Tooltip Text="Replace the usual starting weapon with the Steel Sword, the Axe, the Cat Claw or the Bomb." Inline Multiline Placement="TooltipPlacement.Right">
            <Icon TextColor="TextColor.Secondary" Name="IconName.QuestionCircle" IconSize=IconSize.Small /> 
        </Tooltip>
    </Switch>
</Field>
<Field>
    <Switch TValue="bool" @bind-Checked="@flags.ProgressiveGear">
        <Text TextColor="TextColor.Secondary" class="fw-bold">Progressive Gear</Text>
        <Tooltip Text="Pieces of gear are always acquired from weakest to strongest in a set.<br/><br/>Eg. you'll always received the Steel Sword first, then the Knight Sword and finally Excalibur, irrespective of the order the chests are opened." Inline Multiline Placement="TooltipPlacement.Right">
            <Icon TextColor="TextColor.Secondary" Name="IconName.QuestionCircle" IconSize=IconSize.Small /> 
        </Tooltip>
    </Switch>
</Field>

<div><br /></div>
<h3 id="optionsSection" class="text-secondary">Enemies</h3>

<Field>
    <Switch TValue="bool" @bind-Checked="@flags.ShuffleEnemiesPosition">
        <Text TextColor="TextColor.Secondary" class="fw-bold">Shuffle Enemies' Positions</Text>
        <Tooltip Text="Instead of their original position in a given map, enemies are randomly placed." Inline Multiline Placement="TooltipPlacement.Right">
            <Icon TextColor="TextColor.Secondary" Name="IconName.QuestionCircle" IconSize=IconSize.Small /> 
        </Tooltip>
    </Switch>
</Field>
<Field>
    <FieldLabel TextColor="TextColor.Secondary" class="fw-bold">Enemies Density</FieldLabel>
    <Tooltip Text="Set how many enemies are on each maps." Inline Multiline Placement="TooltipPlacement.Right">
        <Icon TextColor="TextColor.Secondary" Name="IconName.QuestionCircle" IconSize=IconSize.Small /> 
    </Tooltip>
    <Select @bind-SelectedValue="@flags.EnemiesDensity">
        @foreach(var item in Enum.GetValues<FFMQLib.EnemiesDensity>())
        {
            <SelectItem Value="@item">@(item.GetDescription())</SelectItem>
        }
    </Select>
</Field>
<Field>
    <FieldLabel TextColor="TextColor.Secondary" class="fw-bold">Enemies' Stats Scaling</FieldLabel> 
    <Tooltip Text="Adjust enemies stats by the selected percentage." Inline Multiline Placement="TooltipPlacement.Right">
        <Icon TextColor="TextColor.Secondary" Name="IconName.QuestionCircle" IconSize=IconSize.Small /> 
    </Tooltip>
    <Select @bind-SelectedValue="@flags.EnemiesScaling">
        @foreach(var item in Enum.GetValues<FFMQLib.EnemiesScaling>())
        {
            <SelectItem Value="@item">@(item.GetDescription())</SelectItem>
        }
    </Select>
</Field>
<Field>
    <FieldLabel TextColor="TextColor.Secondary" class="fw-bold">Scaling Spread</FieldLabel>
    <Tooltip Text="Add random variation to stats scaling of enemies.<br/><br/>The percentages are additive: eg. scaling of 100% with a spread of 25% means the stats scaling will vary between 75% and 125%." Inline Multiline Placement="TooltipPlacement.Right">
        <Icon TextColor="TextColor.Secondary" Name="IconName.QuestionCircle" IconSize=IconSize.Small /> 
    </Tooltip>
    <Select @bind-SelectedValue="@flags.EnemiesScalingSpread">
        @foreach(var item in Enum.GetValues<FFMQLib.EnemiesScalingSpread>())
        {
            <SelectItem Value="@item">@(item.GetDescription())</SelectItem>
        }
    </Select>
</Field>
<Field>
    <FieldLabel TextColor="TextColor.Secondary" class="fw-bold">Enemizer Attacks</FieldLabel>
    <Tooltip Text="Shuffles enemy attacks.<br /><br />Safe: shuffle but don't add self destruct and Dark Knight attacks<br /><br />chaos: shuffle and include self destruct and Dark Knight attacks<br /><br />self-destruct: every enemy self destructs" Inline Multiline Placement="TooltipPlacement.Right">
        <Icon TextColor="TextColor.Secondary" Name="IconName.QuestionCircle" IconSize=IconSize.Small /> 
    </Tooltip>
    <Select @bind-SelectedValue="@flags.EnemizerAttacks">
        @foreach(var item in Enum.GetValues<FFMQLib.EnemizerAttacks>())
        {
            <SelectItem Value="@item">@(item.GetDescription())</SelectItem>
        }
    </Select>
</Field>

<div><br /></div>
<h3 id="optionsSection" class="text-secondary">Maps</h3>

<Field>
    <FieldLabel TextColor="TextColor.Secondary" class="fw-bold">Doom Castle</FieldLabel>
    <Tooltip Text="Change how you reach the Dark King.<br/><br/>Standard: You need to defeat all four bosses and their floors to reach the Dark King.<br/><br/>Boss Rush: Only the bosses are blocking your way in the corridor to the Dark King's room.<br/><br/>Dark King Only: The way to the Dark King is free of any obstacle." Inline Multiline Placement="TooltipPlacement.Right">
        <Icon TextColor="TextColor.Secondary" Name="IconName.QuestionCircle" IconSize=IconSize.Small /> 
    </Tooltip>
    <Select @bind-SelectedValue="@flags.DoomCastleMode">
        @foreach(var item in Enum.GetValues<FFMQLib.DoomCastleModes>())
        {
            <SelectItem Value="@item">@(item.GetDescription())</SelectItem>
        }
    </Select>
</Field>
<Field>
    <Switch TValue="bool" @bind-Checked="@flags.TweakedDungeons">
        <Text TextColor="TextColor.Secondary" class="fw-bold">Tweak Frustrating Dungeons</Text>
        <Tooltip Text="Make some small changes to a few of the most annoying dungeons.<br/><br/>Ice Pyramid: Add 3 shortcuts on the 1st floor.<br/><br/>Giant Tree: Add shortcuts on the 1st and 4th floors and curtail mushrooms population.<br/><br/>Pazuzu's Tower: Staircases are devoid of enemies (regardless of Enemies Density settings)." Inline Multiline Placement="TooltipPlacement.Right">
            <Icon TextColor="TextColor.Secondary" Name="IconName.QuestionCircle" IconSize=IconSize.Small /> 
        </Tooltip>
    </Switch>
</Field>

<div><br /></div>
<h3 id="optionsSection" class="text-secondary">Misc</h3>

<Field>
    <FieldLabel TextColor="TextColor.Secondary" class="fw-bold">Leveling Curve</FieldLabel>
    <Tooltip Text="Adjust the quantity of XP needed to gain levels.<br/><br/>A curve of 2x means that leveling will be twice faster." Inline Multiline Placement="TooltipPlacement.Right">
        <Icon TextColor="TextColor.Secondary" Name="IconName.QuestionCircle" IconSize=IconSize.Small /> 
    </Tooltip>
    <Select @bind-SelectedValue="@flags.LevelingCurve">
        @foreach(var item in Enum.GetValues<FFMQLib.LevelingCurve>())
        {
            <SelectItem Value="@item">@(item.GetDescription())</SelectItem>
        }
    </Select>
</Field>
<Field>
    <Switch TValue="bool" @bind-Checked="@flags.ShuffleBattlefieldRewards">
        <Text TextColor="TextColor.Secondary" class="fw-bold">Shuffle Battlefields Rewards</Text>
        <Tooltip Text="Shuffle the type of reward (Item, XP, GP) given by battlefields and color code them by reward type.<br/><br/>Blue: Give an item.<br/><br/>Grey: Give XP.<br/><br/>Green: Give GP." Inline Multiline Placement="TooltipPlacement.Right">
            <Icon TextColor="TextColor.Secondary" Name="IconName.QuestionCircle" IconSize=IconSize.Small /> 
        </Tooltip>
    </Switch>
</Field>
<Field>
    <FieldLabel TextColor="TextColor.Secondary" class="fw-bold">Battlefields Battles Quantity</FieldLabel> 
    <Tooltip Text="Adjust the number of battles that need to be fought to get a battlefield's reward." Inline Multiline Placement="TooltipPlacement.Right">
        <Icon TextColor="TextColor.Secondary" Name="IconName.QuestionCircle" IconSize=IconSize.Small /> 
    </Tooltip>
    <Select @bind-SelectedValue="@flags.BattlesQuantity">
        @foreach(var item in Enum.GetValues<FFMQLib.BattlesQty>())
        {
            <SelectItem Value="@item">@(item.GetDescription())</SelectItem>
        }
    </Select>
</Field>
<Field>
    <Switch TValue="bool" @bind-Checked="@flags.EnableSpoilers">
        <Text TextColor="TextColor.Secondary" class="fw-bold">Generate Spoilers File</Text>
        <Tooltip Text="Generate a .txt file with each Key Item's locations." Inline Multiline Placement="TooltipPlacement.Right">
            <Icon TextColor="TextColor.Secondary" Name="IconName.QuestionCircle" IconSize=IconSize.Small /> 
        </Tooltip>
    </Switch>
</Field>

<div><br /></div>
<h3 id="sillySection" class="text-secondary">Customization</h3>
<div class="text-secondary">Customization doesn't affect the randomization and can be enabled/disabled without any impact on gameplay.</div>
<Field>
    <Switch TValue="bool" @bind-Checked="@preferences.RandomBenjaminPalette">
        <Text TextColor="TextColor.Secondary" class="fw-bold">Randomize Benjamin's Palette</Text>
        <Tooltip Text="Select randomly Benjamin's palette, giving him a brand new look!" Inline Multiline Placement="TooltipPlacement.Right">
            <Icon TextColor="TextColor.Secondary" Name="IconName.QuestionCircle" IconSize=IconSize.Small /> 
        </Tooltip>
    </Switch>
</Field>

<div><br /><br /><br /></div>

<Information />

<div><br /><br /><br /><br /><br /></div>

@code{
    //bool IntroPaneVisible = true;
    //bool FilePaneVisible = false;
    //bool MainPaneVisible = false;
    //bool ExtPaneVisible = false;

    private FFMQRom newRom = new();
    private long maxFileSize = 0x80200;
    private bool isLoadingRom = false;
    private bool isGenerating = false;

    private Blob seed = new byte[4];
    private string showSeed;
    private Flags flags = new();
    private Preferences preferences = new();
    private bool generatedRom = false;
    private string seedMessage = "";
    private string romMessage = "";
    private string flagsMessage = "";
    private List<string> titleLetters = new List<string> { "logo/mqlogoM.png", "logo/mqlogoy.png", "logo/mqlogos.png", "logo/mqlogot.png", "logo/mqlogoi.png", "logo/mqlogoc.png", "logo/mqlogoQ.png", "logo/mqlogou.png", "logo/mqlogoe.png", "logo/mqlogos2.png", "logo/mqlogot2.png" };
    private bool updateFlagString = true;
    private string tempFlagString;


    [Parameter]
    public string flagString
    {
        get
        {
            if (updateFlagString)
            {
                tempFlagString = flags.GenerateFlagString();                
                UpdateUrl();
            }
            return tempFlagString;
        }
        set
        {
            if (updateFlagString)
            {
                SetFlags(value);
                UpdateUrl();
            }
        }
    }

    private string GetBetaStatus()
    {
        var uri = new Uri(NavigationManager.Uri);

        string fullUrl = uri.OriginalString;
        int index = fullUrl.IndexOf("dev");
        if (index >= 0)
        {
            return "-beta";
        }

        return "";
    }

    private async Task OnGenerate()
    {
        isGenerating = true;
        StateHasChanged();
        await Task.Delay(1);
        await Generate();
        isGenerating = false;
    }

    private async Task Generate()
    {
        if (newRom.IsEmpty())
        {
            romMessage = "No file.";
            return;
        }

        if (generatedRom)
        {
            newRom.RestoreOriginalData();
            generatedRom = false;
        }

        if (!newRom.Validate())
        {
            romMessage = "Invalid ROM file.";
            return;
        }

        if (GetBetaStatus() != "")
        {
            newRom.beta = true;
        }

        try
        {
            newRom.Randomize(seed, flags, preferences);

            romMessage = "ROM file generated successfully.";

            var fs = newRom.DataStream();
            var fileName = "FFMQR_" + FFMQLib.Metadata.VersionNumber + "_" + seed.ToHex() + "_" + flags.GenerateFlagString() + ".sfc";

            using var streamRef = new DotNetStreamReference(stream: fs);

            await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);

            if (flags.EnableSpoilers)
            {
                var fsSpoilers = newRom.SpoilerStream();
                var fileNameSpoilers = "FFMQR_Spoilers_" + FFMQLib.Metadata.VersionNumber + "_" + seed.ToHex() + "_" + flags.GenerateFlagString() + ".txt";

                using var streamRefSpoilers = new DotNetStreamReference(stream: fsSpoilers);

                await JS.InvokeVoidAsync("downloadFileFromStream", fileNameSpoilers, streamRefSpoilers);
            }
        }
        catch (Exception ex)
        {
            romMessage = ex.Message;
        }

        generatedRom = true;
    }

    private async Task LoadFiles(FileChangedEventArgs e)
    {
        romMessage = "Loading...";
        isLoadingRom = true;
        StateHasChanged();
        try
        {
            await newRom.LoadAsync(e.Files.First().OpenReadStream(maxFileSize));
            if (!newRom.Validate())
            {
                romMessage = "Invalid ROM file.";
                isLoadingRom = false;
                return;
            }
            else
            {
                romMessage = "ROM file loaded succesfully.";
                isLoadingRom = false;
                newRom.BackupOriginalData();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void RollSeed()
    {
        var rng = new Random();
        rng.NextBytes(seed);
        MT19337 rng2 = new MT19337((uint)seed.ToUInts().Sum(x => x));
        titleLetters.Shuffle(rng2);
        showSeed = seed.ToHex();
        UpdateUrl();
    }

    private void UpdateUrl()
    { 
        var uri = new Uri(NavigationManager.Uri);

        var test = NavigationManager.GetUriWithQueryParameters(new Dictionary<string, object>
        {
         { "s", showSeed },
         { "f", flags.GenerateFlagString() }
        });

        NavigationManager.NavigateTo(test);
    }

    private string MakeParsableUriString(string uristring)
    {
        var qmarkIndex = uristring.IndexOf('?');
        var hashIndex = uristring.IndexOf('#');

        if (qmarkIndex == -1)
        {
            return ""; 
        }
        else if (qmarkIndex > hashIndex)
        {
            return uristring.Remove(0, qmarkIndex);
        }
        else
        { 
            return uristring.Remove(hashIndex).Remove(0, qmarkIndex);
        }
    }

    protected override void OnInitialized()
    {
        var uri = new Uri(NavigationManager.Uri);

        string parsableUri = MakeParsableUriString(uri.OriginalString);

        var seedParameter = HttpUtility.ParseQueryString(parsableUri).Get("s");
        if (seedParameter != null)
        {
            SetSeed(seedParameter);
        }
        else
        {
            RollSeed();            
        }

        var flagsParameter = HttpUtility.ParseQueryString(parsableUri).Get("f");
        if (flagsParameter != null)
        {
            flagString = flagsParameter;
        }
        else
        {
            flagsMessage = "Using default flags.";
        }

    }

    // Seed Field Functions
    Task SeedOnChanged(string value)
    {
        showSeed = value;
        EvaluateSeed(showSeed);
        return Task.CompletedTask;
    }

    Task SeedOnKeyUp(KeyboardEventArgs value)
    {
        if (value.Key == "Enter")
        {
            EvaluateSeed(showSeed);
            SetSeed(showSeed);
            UpdateUrl();
        }

        return Task.CompletedTask;
    }

    Task SeedOnLoseFocus()
    {
        EvaluateSeed(showSeed);
        SetSeed(showSeed);
        UpdateUrl();
        return Task.CompletedTask;
    }

    private void EvaluateSeed(string value)
    {
        if (value.Length < 8)
        {
            seedMessage = "Invalid Seed: Seed string is too short (min 8 digits).";
        }
        else if (value.Length > 8)
        {
            seedMessage = "Invalid Seed: Seed string is too long (max 8 digits).";
        }
        else
        {
            seedMessage = "";
        }
    }

    private void SetSeed(string value)
    {
        showSeed = value;
        try
        {
            if (showSeed.Length > 8)
            { 
                showSeed = showSeed.Remove(8);
            }
            showSeed = showSeed.PadLeft(8, '0');
            seed = Blob.FromHex(showSeed);
            seedMessage = "";
        }
        catch (Exception ex)
        {
            seedMessage = "Invalid Seed: " + ex.Message;
        }
    }



    private async Task CopyTextToClipboard()
    {
        await JS.InvokeVoidAsync("copyClipboard");
    }

    // Flag Field Functions
    Task FlagsOnChanged( string value )
    {
        updateFlagString = false;
        tempFlagString = value;
        return Task.CompletedTask;
    }

    Task FlagsOnKeyUp(KeyboardEventArgs value)
    {
        if (value.Key == "Enter")
        {
            updateFlagString = true;
            flagString = tempFlagString;
            UpdateUrl();
        }

        return Task.CompletedTask;
    }

    Task FlagsOnLoseFocus()
    {
        updateFlagString = true;
        flagString = tempFlagString;
        UpdateUrl();
        return Task.CompletedTask;
    }

    Task SetFlags( string value )
    {
        try
        {
            flags.ReadFlagString(value);
            flagsMessage = "Flags loaded successfully.";
        }
        catch (Exception)
        {
            flagsMessage = "Invalid flags string.";
        }

        return Task.CompletedTask;
    }
}
