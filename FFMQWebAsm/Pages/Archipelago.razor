@page "/Archipelago"
@using Microsoft.AspNetCore.Components.Forms
@using System.IO;
@using System.IO.Compression;
@using System;
@using System.Web
@using System.Net.Http
@using System.Text;
@using FFMQLib;
@using Microsoft.JSInterop;
@using Microsoft.JSInterop.WebAssembly;
@using Blazorise.Components;
@using RomUtilities;
@using Microsoft.AspNetCore.Components
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage
@inject HttpClient Http


<style>
    body {

        background: linear-gradient(rgba(27,42,81,1),rgba(85,109,171,1)) no-repeat center fixed;
        background-size: cover;
    }
</style>

@if (loadingDone)
{
	<div class="@("center-logo")">
		<img style="max-width:100%; height:140px; position: relative; margin-top:-40px" alt="FFMQ Randomizer Logo" src="logo/FFMQRLogo-Final-Web.svg" />
		<h1 class="text-secondary" style="font-size: 1em; text-align: right">@("v" + (@betaStatus ? @FFMQLib.Metadata.Version + "-beta" : @FFMQLib.Metadata.Release))</h1>
	</div>


	<div><br /><br /></div>

<Container class="sectionBox">
    <div class="box-title text-secondary">Archipelago</div>
    <Container Class="infoBox">
            <div class="text-secondary">Upload your Archipelago config file (.apmq) to generate an AP compatible rom. Visit the <a href="https://archipelago.gg/tutorial/Final%20Fantasy%20Mystic%20Quest/setup/en" target="_blank" rel="noopener noreferrer" class="text-secondary" style="text-decoration: underline">FFMQ Multiworld Setup Guide <Icon Name="IconName.ExternalLinkSquareAlt" class="text-secondary" /></a> for more info.</div>
    </Container>
</Container>

<div><br /></div>
}
<Container class="sectionBox" Style=@(loadingDone ? "" : "display: none")>
    <div class="box-title text-secondary">
        Generation       
    </div> 

    <Container Class="flagBox">
        <Container Class="flagColumn">
            <GenerateButton Flags="flags" ApConfigs="apconfigs" Seed="seed" Preferences="preferences" Beta="@GetBetaStatus()" IsLoadFromMemoryDone="LoadFromMemoryDone" />
        </Container>
        <Container Class="flagColumn">
            <Field Class="dropFlag">
                <FieldLabel TextColor="TextColor.Secondary" class="fw-bold">
                    Load Archipelago Config File
                    </FieldLabel>
                    <FileEdit Filter=".apmq" AutoReset="false" Changed="@LoadApConfigFile"></FileEdit>
                    <FieldHelp>@yamlMessage</FieldHelp>
            </Field>
        </Container>
    </Container>
</Container>

@if (loadingDone)
{
    <div><br /></div>

<PreferencesSection preferences="@preferences" />

	<div><br /><br /><br /><br /></div>
	<div><br /><br /><br /></div>
	<LogoCredit />
}

@code{
    private long maxFileSize = 0x80200;
    private bool loadingDone = false;
    private bool betaStatus = false;

    private Flags flags = new();
    private Preferences preferences = new();
    private ApConfigs apconfigs = new();
    private Blob seed = new byte[4];

    private string yamlPreset = "";
    private string yamlMessage = "";
    private string yamlName = "default";

    private bool GetBetaStatus()
    {
        var uri = new Uri(NavigationManager.Uri);

        string fullUrl = uri.OriginalString;
        int index = fullUrl.IndexOf("dev");
        if (index >= 0)
        {
            return true;
        }

        return false;
    }

    private async Task LoadYamlFromUpload(FileChangedEventArgs e)
    {
        try
        {
            using (StreamReader streamReader = new StreamReader(e.Files.First().OpenReadStream(maxFileSize), Encoding.UTF8))
            {
                await LoadYamlFromStreamReader(streamReader);
            }
        }
        catch (Exception ex)
        {
            yamlMessage = ex.Message;
            Console.WriteLine(ex.Message);
        }
    }
    private async Task LoadYamlFromStreamReader(StreamReader streamReader)
    {
        try
        {
            using (streamReader)
            {
                yamlPreset = await streamReader.ReadToEndAsync();
            }

            yamlName = flags.ReadYaml(yamlPreset, apconfigs.GetSeed());
        }
        catch (Exception ex)
        {
            yamlMessage = ex.Message;
            Console.WriteLine(ex.Message);
        }
    }

    async void LoadApConfigFile(FileChangedEventArgs e)
    {
        try
        {
            MemoryStream memZip = new();

            await e.Files.First().WriteToStreamAsync(memZip);
            apconfigs.FileName = e.Files.First().Name.Split('.')[0];
            using (ZipArchive configContainer = new ZipArchive(memZip))
            {
                foreach (var file in configContainer.Entries)
                {
                    if (file.Name == "itemplacement.yaml")
                    {
                        using (var streamReader = new StreamReader(file.Open(), Encoding.UTF8))
                        {
                            apconfigs.ItemPlacementYaml = await streamReader.ReadToEndAsync();
                        }
                    }
                    else if (file.Name == "startingitems.yaml")
                    {
                        using (var streamReader = new StreamReader(file.Open(), Encoding.UTF8))
                        {
                            apconfigs.StartingItemsYaml = await streamReader.ReadToEndAsync();
                        }
                    }
                    else if (file.Name == "flagset.yaml")
                    {
                        using (var streamReader = new StreamReader(file.Open(), Encoding.UTF8))
                        {
                            await LoadYamlFromStreamReader(streamReader);
                        }
                    }
                    else if (file.Name == "setup.yaml")
                    {
                        using (var streamReader = new StreamReader(file.Open(), Encoding.UTF8))
                        {
                            apconfigs.SetupYaml = await streamReader.ReadToEndAsync();
                        }
                    }
                    else if (file.Name == "rooms.yaml")
                    {
                        using (var streamReader = new StreamReader(file.Open(), Encoding.UTF8))
                        {
                            apconfigs.RoomsYaml = await streamReader.ReadToEndAsync();
                        }
                    }

                }
            }

            apconfigs.ProcessYaml();
            yamlMessage = "Archipelago Config File loaded successfully.";

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }


    }

    protected override void OnInitialized()
    {
        betaStatus = GetBetaStatus();
    }

    void LoadFromMemoryDone(bool result)
    {
        loadingDone = true;
        JS.InvokeVoidAsync("hideLoadingBox");
        StateHasChanged();
    }

}
