@page "/Archipelago"
@using Microsoft.AspNetCore.Components.Forms
@using System.IO;
@using System.IO.Compression;
@using System;
@using System.Web
@using System.Net.Http
@using System.Text;
@using FFMQLib;
@using Microsoft.JSInterop;
@using Microsoft.JSInterop.WebAssembly;
@using Blazorise.Components;
@using RomUtilities;
@using Microsoft.AspNetCore.Components
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage
@inject HttpClient Http


<style>
    body {

        background: linear-gradient(rgba(27,42,81,1),rgba(85,109,171,1)) no-repeat center fixed;
        background-size: cover;
    }
</style>

<div class="@(sandboxMode ? "center-logo-sandbox" : "center-logo")">
    @if (sandboxMode)
    {
        <img height=@titleHeight src="logo/logosandbox_hebinx.gif" />
    }
    else
    {
        <img height=@titleHeight src="@titleLetters[0]" /><img height=@titleHeight src="@titleLetters[1]" /><img height=@titleHeight src="@titleLetters[2]" /><img height=@titleHeight src="@titleLetters[3]" /><img height=@titleHeight src="@titleLetters[4]" /><img height=@titleHeight src="@titleLetters[5]" /><img height=@titleHeight src="logo/mqlogo_.png" /><img height=@titleHeight src="@titleLetters[6]" /><img height=@titleHeight src="@titleLetters[7]" /><img height=@titleHeight src="@titleLetters[8]" /><img height=@titleHeight src="@titleLetters[9]" /><img height=@titleHeight src="@titleLetters[10]" />
    }
</div>
<h1 class="text-secondary text-center" style="font-size: 1em">A FFMQ Randomizer<br />@("v" + @FFMQLib.Metadata.Version + (@betaStatus ? "-beta" : "") + (@sandboxMode ? " Sandbox" : ""))</h1>

<div><br /></div>

<Container class="sectionBox">
    <div class="box-title text-secondary">Archipelago</div>
    <Container Class="infoBox">
        <div class="text-secondary">Upload your Archipelago config file (.apmq) to generate an AP compatible rom. Visit the <a href="https://archipelago.gg/tutorial/Final%20Fantasy/multiworld/en" target="_blank" rel="noopener noreferrer" class="text-secondary" style="text-decoration: underline">FFMQ Multiworld Setup Guide <Icon Name="IconName.ExternalLinkSquareAlt" class="text-secondary" /></a> for more info.</div>
    </Container>
</Container>

<div><br /></div>

<Container class="sectionBox">
    <div class="box-title text-secondary">
        Generation       
    </div> 

    <Container Class="flagBox">
        <Container Class="flagColumn">
        @if(!romLoaded)
        {
            <Field class="romFlag">
                <FieldLabel TextColor="TextColor.Secondary" class="fw-bold">ROM</FieldLabel> 
                <FileEdit Filter=".sfc" AutoReset="false" Changed="@LoadFiles"></FileEdit>
                <FieldHelp>@romMessage</FieldHelp>
            </Field>
        }
        else
        {
            <Field class="romFlag">
                <FieldLabel TextColor="TextColor.Secondary" class="fw-bold">ROM</FieldLabel> 
                <Button Color="Color.Primary" Loading="@isGenerating" Clicked="@OnGenerate" Disabled="@isLoadingRom" class="romBtn">Generate</Button>
                <FieldHelp>@romMessage</FieldHelp>
            </Field>
        }

        @if(romLoaded)
        {
            <a href="" @onclick="@UnloadRom" @onclick:preventDefault>Use a different ROM file</a>
        }
        </Container>
        <Container Class="flagColumn">
            <Field Class="dropFlag">
                <FieldLabel TextColor="TextColor.Secondary" class="fw-bold">
                    Load Archipelago Config File
                    </FieldLabel>
                    <FileEdit Filter=".apmq" AutoReset="false" Changed="@LoadApConfigFile"></FileEdit>
                    <FieldHelp>@yamlMessage</FieldHelp>
            </Field>
        </Container>
    </Container>
</Container>

<div><br /></div>

<PreferencesSection preferences="@preferences" />

<div><br /><br /><br /><br /><br /></div>

                    @code{

    private FFMQRom newRom = new();
    private long maxFileSize = 0x80200;
    private bool isLoadingRom = false;
    private bool isGenerating = false;
    private bool romLoaded = false;
    private bool usePreset = false;
    private int titleHeight = 80;
    private bool sandboxMode = false;
    private bool betaStatus = false;
    private string apFilename = "";

    private Flags flags = new();
    private Preferences preferences = new();
    private ApConfigs apconfigs = new();
    private bool generatedRom = false;
    private string seedMessage = "";
    private string romMessage = "";
    private string flagsMessage = "";
    private List<string> titleLetters = new List<string> { "logo/mqlogoM.png", "logo/mqlogoy.png", "logo/mqlogos.png", "logo/mqlogot.png", "logo/mqlogoi.png", "logo/mqlogoc.png", "logo/mqlogoQap.png", "logo/mqlogou.png", "logo/mqlogoe.png", "logo/mqlogos2.png", "logo/mqlogot2.png" };

    private string yamlPreset = "";
    private string yamlMessage = "";
    private string yamlName = "default";
    private string savedRom = "";

    private bool GetBetaStatus()
    {
        var uri = new Uri(NavigationManager.Uri);

        string fullUrl = uri.OriginalString;
        int index = fullUrl.IndexOf("dev");
        if (index >= 0)
        {
            return true;
        }

        return false;
    }

    private bool GetSandboxStatus()
    {
        var uri = new Uri(NavigationManager.Uri);

        string fullUrl = uri.OriginalString;
        int index = fullUrl.IndexOf("sandbox");
        if (index >= 0)
        {

            return true;
        }    

        return false;
    }

    private async Task OnGenerate()
    {
        isGenerating = true;
        StateHasChanged();
        await Task.Delay(1);
        await Generate();
        isGenerating = false;
    }

    private async Task Generate()
    {
        if (newRom.IsEmpty())
        {
            romMessage = "No file.";
            return;
        }

        if (generatedRom)
        {
            newRom.RestoreOriginalData();
            generatedRom = false;
        }

        if (!newRom.Validate())
        {
            romMessage = "Invalid ROM file.";
            return;
        }

        if (GetBetaStatus())
        {
            newRom.beta = true;
        }

        try
        {
            newRom.GenerateFromApConfig(apconfigs, flags, preferences);

            romMessage = "Archipelago ROM file generated successfully.";

            var fs = newRom.DataStream();
            string fileName = apFilename + ".sfc";

            using var streamRef = new DotNetStreamReference(stream: fs);

            await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);

            if (flags.EnableSpoilers)
            {
                var fsSpoilers = newRom.SpoilerStream();
                var fileNameSpoilers = apFilename + "_Spoilers" + ".txt";

                using var streamRefSpoilers = new DotNetStreamReference(stream: fsSpoilers);

                await JS.InvokeVoidAsync("downloadFileFromStream", fileNameSpoilers, streamRefSpoilers);
            }
        }
        catch (Exception ex)
        {
            romMessage = ex.Message;
        }

        generatedRom = true;
    }

    private async Task LoadFiles(FileChangedEventArgs e)
    {
        romMessage = "Loading...";
        isLoadingRom = true;
        StateHasChanged();
        try
        {
            await newRom.LoadAsync(e.Files.First().OpenReadStream(maxFileSize));
            if (!newRom.Validate())
            {
                romMessage = "Invalid ROM file.";
                isLoadingRom = false;
                return;
            }
            else
            {
                romMessage = "ROM file loaded succesfully.";
                isLoadingRom = false;
                romLoaded = true;
                newRom.BackupOriginalData();
                SaveRom();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void UnloadRom()
    {
        romLoaded = false;
        savedRom = "";
        romMessage = "";
        newRom = new();
        SaveRom();
    }

    private void SaveRom()
    {
        if (!newRom.IsEmpty())
        {
            newRom.RestoreOriginalData();
            savedRom = Convert.ToBase64String(newRom.DataReadOnly);
        }
        else
        {
            savedRom = "";
        }

        localStorage.SetItem("SavedRom", savedRom);
    }

    public void LoadRom()
    { 
        if (savedRom != "")
        {
            newRom.Load(Convert.FromBase64String(savedRom));
            romMessage = "Loading...";
            isLoadingRom = true;
            StateHasChanged();

            try
            {
                if (!newRom.Validate())
                {
                    romMessage = "Invalid ROM file.";
                    isLoadingRom = false;
                    romLoaded = false;
                    return;
                }
                else
                {
                    romMessage = "ROM file loaded from memory succesfully.";
                    isLoadingRom = false;
                    romLoaded = true;
                    newRom.BackupOriginalData();
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }

    private async Task LoadYamlFromUpload(FileChangedEventArgs e)
    {
        try
        {
            using (StreamReader streamReader = new StreamReader(e.Files.First().OpenReadStream(maxFileSize), Encoding.UTF8))
            {
                await LoadYamlFromStreamReader(streamReader);
            }
        }
        catch (Exception ex)
        {
            yamlMessage = ex.Message;
            Console.WriteLine(ex.Message);
        }
    }
    private async Task LoadYamlFromStreamReader(StreamReader streamReader)
    {
        try
        {
            using (streamReader)
            {
                yamlPreset = await streamReader.ReadToEndAsync();
            }

            yamlName = flags.ReadYaml(yamlPreset, apconfigs.GetSeed());
            flagsMessage = "Preset loaded succesfully.";
        }
        catch (Exception ex)
        {
            yamlMessage = ex.Message;
            Console.WriteLine(ex.Message);
        }
    }

    async void LoadApConfigFile(FileChangedEventArgs e)
    {
        try
        {
            MemoryStream memZip = new();

            await e.Files.First().WriteToStreamAsync(memZip);
            apFilename = e.Files.First().Name.Split('.')[0];
            using (ZipArchive configContainer = new ZipArchive(memZip))
            {
                foreach (var file in configContainer.Entries)
                {
                    if (file.Name == "itemplacement.yaml")
                    {
                        using (var streamReader = new StreamReader(file.Open(), Encoding.UTF8))
                        {
                            apconfigs.ItemPlacementYaml = await streamReader.ReadToEndAsync();
                        }
                    }
                    else if (file.Name == "startingitems.yaml")
                    {
                        using (var streamReader = new StreamReader(file.Open(), Encoding.UTF8))
                        {
                            apconfigs.StartingItemsYaml = await streamReader.ReadToEndAsync();
                        }
                    }
                    else if (file.Name == "flagset.yaml")
                    {


                        using (var streamReader = new StreamReader(file.Open(), Encoding.UTF8))
                        {
                            await LoadYamlFromStreamReader(streamReader);
                        }
                    }
                    else if (file.Name == "setup.yaml")
                    {
                        using (var streamReader = new StreamReader(file.Open(), Encoding.UTF8))
                        {
                            apconfigs.SetupYaml = await streamReader.ReadToEndAsync();
                        }
                    }

                }
            }

            apconfigs.ProcessYaml();
            yamlMessage = "Archipelago Config File loaded successfully.";

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }


    }

    protected override async void OnInitialized()
    {
        sandboxMode = GetSandboxStatus();
        betaStatus = GetBetaStatus();
        if (sandboxMode)
        {
            titleHeight = 240;
        }

        localStorage.RemoveItem("RomPath");
        savedRom = localStorage.GetItem<string>("SavedRom") ?? "";
        LoadRom();
    }

}
