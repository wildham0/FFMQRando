@using System.IO;
@using System.Text;
@inject HttpClient Http
@using System.Net.Http
@using FFMQLib;

<Container class="sectionBox">
	<div class="box-title text-secondary">Presets</div> 
	<Container Class="flagBox">
		<Container Class="flagColumn">
			<Field Class="dropFlag">
				<FieldLabel TextColor="TextColor.Secondary" class="fw-bold">Preset Selection</FieldLabel> 
				<Select TValue="string" @bind-SelectedValue="@presetSelection" @onchange="@OnChange">
					<SelectGroup Label="Config">
						<SelectItem Value="@("custom")">Custom</SelectItem>
						<SelectItem Value="@("import")">Import from File</SelectItem>
						@if (!DisableExport)
						{ 
							<SelectItem Value="@("export")">Export to File</SelectItem>
						}
					</SelectGroup>
					<SelectGroup Label="Presets">
						@foreach (var preset in presetNames)
						{
							<SelectItem Value=@(preset.Key)>@preset.Value</SelectItem>
							
						}
					</SelectGroup>
				</Select>
			</Field>
		</Container>
		<Container Class="flagColumn">
			@if (presetSelection == "import")
			{
				<Field Class="dropFlag">
					<FieldLabel TextColor="TextColor.Secondary" class="fw-bold">
					Load File
					<Tooltip Text="Load the flags selection from a Yaml configuration file.<br/><br/>With a text editor, each options can be manually weighted. If a Yaml file is loaded, each time a seed is rolled, the flags will be configured randomly using the weighted values. Exporting to file reset the weighting." Inline Multiline Placement="TooltipPlacement.Right">
						<Icon TextColor="TextColor.Secondary" Name="IconName.QuestionCircle" IconSize=IconSize.Small /> 
					</Tooltip>     
					</FieldLabel> 
					<FileEdit Filter=".yaml" AutoReset="false" Changed="@LoadYamlFromUpload"></FileEdit>
					<FieldHelp>@yamlMessage</FieldHelp>
				</Field>
			}
			else if (presetSelection == "export")
			{
				<Field Class="dropFlag">
					<FieldLabel TextColor="TextColor.Secondary" class="fw-bold">Name</FieldLabel> 
					<TextEdit @bind-Text="@yamlName"></TextEdit>
				</Field>
				<Field Class="dropFlag">
					<Button Color="Color.Primary" Clicked="@ExportFile">Export</Button>
				</Field>      
			}
		</Container>
	</Container>
</Container>

@code
{
	[Parameter]
	public string Name { get; set; }

	[Parameter]
	public string Tooltip { get; set; }

	[Parameter]
	public string Value { get; set; }

	[Parameter] public Action<(Stream file, string filename, string action, bool usepreset, bool loadfromfile)> SetPresetAction { get; set; }

	[Parameter] public Action<string> SetExportFile { get; set; }

	[Parameter]
	public bool UsePreset { get; set; }

	[Parameter]
	public bool DisableExport { get; set; }

	private string presetSelection = "custom";
	//private string yamlPreset = "";
	private string yamlMessage = "";
	private string yamlName = "default";

	private Dictionary<string, string> presetNames = new()
	{
		{ "beginner", "Beginner" },
		{ "sgl2022", "Standard / SGL2022" },
		{ "sgl2023", "SGL2023" },
		{ "sgl2024", "SGL2024" },
		{ "season2025", "Community Races Season 2025" },
		{ "overworldshuffle", "Overworld Shuffle" },
		{ "solocompanion", "Solo Companion" },
		{ "zerodensity", "Zero Encounters" },
		{ "oops", "Oops All Random" },
	};

	async Task OnChange(ChangeEventArgs e)
	{
		presetSelection = e.Value.ToString();
		if (presetSelection == "custom" || presetSelection == "import" || presetSelection == "export")
		{
			SetPresetAction.Invoke((null, "", "", false, false));
		}
		else
		{
			yamlName = e.Value.ToString();
			SetPresetAction.Invoke((await LoadYamlFromFile(e.Value.ToString()), "", e.Value.ToString(), true, false));
		}
	}

	void ExportFile()
	{
		SetExportFile.Invoke(yamlName);
	}

	void LoadYamlFromUpload(FileChangedEventArgs e)
	{
		try
		{
			SetPresetAction.Invoke((e.Files.First().OpenReadStream(), e.Files.First().Name.Split('.')[0], presetSelection, true, true));
			yamlName = e.Files.First().Name.Split('.')[0];
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}
	}

	async Task<Stream> LoadYamlFromFile(string presetname)
	{
		try
		{
			var stream = await Http.GetStreamAsync("presets/" + presetname + ".yaml");

			return stream;
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
			return null;
		}
	}
}